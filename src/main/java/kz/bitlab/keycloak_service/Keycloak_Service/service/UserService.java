package kz.bitlab.keycloak_service.Keycloak_Service.service;

import kz.bitlab.keycloak_service.Keycloak_Service.dto.User.UserCreateDto;
import kz.bitlab.keycloak_service.Keycloak_Service.dto.User.UserResponseDto;
import kz.bitlab.keycloak_service.Keycloak_Service.dto.User.UserUpdateDto;
import kz.bitlab.keycloak_service.Keycloak_Service.exception.NotFoundException;
import kz.bitlab.keycloak_service.Keycloak_Service.userUtil.UserUtil;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.keycloak.admin.client.Keycloak;
import org.keycloak.admin.client.resource.RealmResource;
import org.keycloak.admin.client.resource.UserResource;
import org.keycloak.representations.idm.CredentialRepresentation;
import org.keycloak.representations.idm.RoleRepresentation;
import org.keycloak.representations.idm.UserRepresentation;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import javax.ws.rs.core.Response;
import java.util.List;
import java.util.stream.Collectors;


@Service
@RequiredArgsConstructor
@Slf4j
public class UserService {

    private final Keycloak keycloak;
    private final RestTemplate restTemplate;

    @Value("${keycloak.url}")
    private String keycloakUrl;

    @Value("${keycloak.realm}")
    private String realm;

    @Value("${keycloak.client-id}")
    private String clientId;

    @Value("${keycloak.client-secret}")
    private String clientSecret;

    //–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    public List<UserResponseDto> getAllUsers() {
        log.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");

        List<UserRepresentation>users = keycloak.realm(realm).users().list();
        return users.stream()
                .map(user -> {
                    String role = getUserPrimaryRole(user.getId());
                    return userToDto(user, role);
                })
                .collect(Collectors.toList());

    }

    //–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Id
    public UserResponseDto getUserById(String userId) {
        try {
            UserRepresentation user = keycloak.realm(realm)
                    .users()
                    .get(userId)
                    .toRepresentation();
            String role = getUserPrimaryRole(userId);
            return userToDto(user, role);
        }catch (javax.ws.rs.NotFoundException e) {
            log.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ ID:{} –Ω–µ –Ω–∞–π–¥–µ–Ω: ", userId);
            throw new NotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ ID: " + userId+" –Ω–µ –Ω–∞–π–¥–µ–Ω: " + e.getMessage());
        }
    }

    //–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public UserCreateDto createUser(UserCreateDto userCreateDto) {

        UserRepresentation newUser = new UserRepresentation();
        newUser.setEmail(userCreateDto.getEmail());
        newUser.setEmailVerified(true);
        newUser.setUsername(userCreateDto.getUsername());
        newUser.setFirstName(userCreateDto.getFirstName());
        newUser.setLastName(userCreateDto.getLastName());
        newUser.setEnabled(true);

        CredentialRepresentation credential = new CredentialRepresentation();
        credential.setType(CredentialRepresentation.PASSWORD);
        credential.setValue(userCreateDto.getPassword());
        credential.setTemporary(false);
        newUser.setCredentials(List.of(credential));

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Response response = keycloak.realm(realm).users().create(newUser);
        if (response.getStatus() == 201) {
            String location = response.getHeaderString("Location");
            String userId = location.substring(location.lastIndexOf('/') + 1);
            newUser.setId(userId);

            // üëâ –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "ADMIN")
            String roleName = userCreateDto.getRole();

            // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ user
            UserResource userResource = keycloak.realm(realm).users().get(userId);

            // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ Realm
            RoleRepresentation role = keycloak.realm(realm).roles().get(roleName).toRepresentation();

            // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            userResource.roles().realmLevel().add(List.of(role));

            return userCreateDto;
        } else {
            String error = response.readEntity(String.class);
            throw new RuntimeException("Keycloak error: " + error);
        }
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public UserResponseDto updateUser(UserUpdateDto userUpdateDto) {
        String username = UserUtil.getCurrentUsername();
        List<UserRepresentation> users = keycloak.realm(realm).users().search(username);

        if (users.isEmpty()) {
            throw new NotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: " + username);
        }

        String userId = users.get(0).getId();
        UserResource userResource = keycloak.realm(realm).users().get(userId);
        UserRepresentation existingUser = userResource.toRepresentation();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
        existingUser.setId(userId);

        if (userUpdateDto.getUsername() != null) {
            existingUser.setUsername(userUpdateDto.getUsername());
        }
        if (userUpdateDto.getFirstName() != null) {
            existingUser.setFirstName(userUpdateDto.getFirstName());
        }
        if (userUpdateDto.getLastName() != null) {
            existingUser.setLastName(userUpdateDto.getLastName());
        }
        if (userUpdateDto.getEmail() != null) {
            existingUser.setEmail(userUpdateDto.getEmail());
        }

        // –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userResource.update(existingUser);

        // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        List<RoleRepresentation> roles = userResource.roles().realmLevel().listEffective();
        String roleName = roles.isEmpty() ? null : roles.get(0).getName();

        return userToDto(existingUser, roleName);
    }

    //–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public void changePassword(String username, String newPassword) {
        List<UserRepresentation> users = keycloak
                .realm(realm)
                .users()
                .search(username);

        if (users.isEmpty()) {
            log.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –Ω–∏–∫–Ω–µ–π–º—É: {} –Ω–µ –Ω–∞–π–¥–µ–Ω: ", username);
            throw new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –Ω–∏–∫–Ω–µ–π–º—É: "+username +" –Ω–µ –Ω–∞–π–¥–µ–Ω " );
        }

        UserRepresentation user = users.get(0);

        CredentialRepresentation credential = new CredentialRepresentation();
        credential.setType(CredentialRepresentation.PASSWORD);
        credential.setValue(newPassword);
        credential.setTemporary(false);

        keycloak
                .realm(realm)
                .users()
                .get(user.getId())
                .resetPassword(credential);

        log.info("Password changed successfully for username: {}", username);
    }

    //–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public void deleteUserById(String userId) {
        log.info("–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");

        RealmResource realmResource = keycloak.realm(realm);
        try {
            realmResource.users().get(userId).remove();
            log.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", userId);
        } catch (Exception e) {
            log.error("Failed to delete user with ID {}", userId, e);
            throw new NotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID " + userId + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
    }

    //–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public String getUserPrimaryRole(String userId) {
        List<RoleRepresentation> roles = keycloak.realm(realm)
                .users()
                .get(userId)
                .roles()
                .realmLevel()
                .listEffective();

        if (roles.isEmpty()) {
            return null;
        }
        return roles.get(0).getName();
    }

    //–ú–∞–ø–ø–µ—Ä —Å KeycloakUser –≤ SpringDto
    public UserResponseDto userToDto(UserRepresentation user,String role){
        return UserResponseDto.builder()
                .id(user.getId())
                .username(user.getUsername())
                .firstName(user.getFirstName())
                .lastName(user.getLastName())
                .email(user.getEmail())
                .role(role)
                .build();
    }

}
